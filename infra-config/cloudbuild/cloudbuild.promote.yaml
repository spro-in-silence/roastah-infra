# Cloud Build configuration for production deployment
steps:
  # 1. Authenticate to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: Authenticate
    entrypoint: bash
    args:
      - '-c'
      - |
        gcloud auth configure-docker us-central1-docker.pkg.dev

  # 2. Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: Build Image
    entrypoint: bash
    args:
      - '-c'
      - |
        docker build -t us-central1-docker.pkg.dev/$PROJECT_ID/roastah/roastah:$SHORT_SHA .
        docker push us-central1-docker.pkg.dev/$PROJECT_ID/roastah/roastah:$SHORT_SHA

  # 3. Tag as latest
  - name: 'gcr.io/cloud-builders/docker'
    id: Tag Latest
    entrypoint: bash
    args:
      - '-c'
      - |
        docker tag us-central1-docker.pkg.dev/$PROJECT_ID/roastah/roastah:$SHORT_SHA us-central1-docker.pkg.dev/$PROJECT_ID/roastah/roastah:latest
        docker push us-central1-docker.pkg.dev/$PROJECT_ID/roastah/roastah:latest

  # 4. Keep only last 2 Artifact Registry images
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Prune Old Images
    entrypoint: bash
    args:
      - '-c'
      - |
        images=$(gcloud artifacts docker images list us-central1-docker.pkg.dev/$PROJECT_ID/roastah --format="value(package)" | sort -r)
        to_delete=$(echo "$images" | tail -n +3)
        for img in $to_delete; do
          gcloud artifacts docker images delete "$img" --quiet --delete-tags
        done

  # 5. Send build notification
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Send Notification
    entrypoint: bash
    args:
      - '-c'
      - |
        gcloud pubsub topics publish ci-notify \
          --message="Production image built for commit $COMMIT_SHA" \
          --attribute="status=success,environment=production,commit=$COMMIT_SHA"

images:
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/roastah/roastah:$SHORT_SHA'
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/roastah/roastah:latest'

substitutions:
  _SERVICE_NAME: 'roastah'
  _REGION: 'us-central1'

timeout: '1800s'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

# IAM Requirements (managed by Terraform):
# - Cloud Build Service Account needs:
#   - roles/storage.admin on roastah project
#   - roles/pubsub.publisher on ci-notify topic
#
# All IAM permissions are now managed by Terraform 