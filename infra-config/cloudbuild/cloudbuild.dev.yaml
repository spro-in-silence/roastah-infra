# Cloud Build configuration for development deployment to Cloud Run
steps:
  # 1. Create Artifact Registry repository if it doesn't exist
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Create Repository
    entrypoint: bash
    args:
      - '-c'
      - |
        gcloud artifacts repositories create rate-grid-d \
          --repository-format=docker \
          --location=us-central1 \
          --quiet || true

  # 2. Build and push Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: Build & Push
    args: 
      - 'build'
      - '-t'
      - 'us-central1-docker.pkg.dev/$PROJECT_ID/rate-grid-d/rate-grid-d:$SHORT_SHA'
      - '--cache-from'
      - 'us-central1-docker.pkg.dev/$PROJECT_ID/rate-grid-d/rate-grid-d:latest'
      - '--build-arg'
      - 'NPM_CACHE=npm-cache.tar.gz'
      - '.'

  # 3. Push the container image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    id: Push Image
    args: ['push', 'us-central1-docker.pkg.dev/$PROJECT_ID/rate-grid-d/rate-grid-d:$SHORT_SHA']

  # 4. Tag and push latest for cache
  - name: 'gcr.io/cloud-builders/docker'
    id: Tag Latest
    entrypoint: bash
    args:
      - '-c'
      - |
        docker tag us-central1-docker.pkg.dev/$PROJECT_ID/rate-grid-d/rate-grid-d:$SHORT_SHA us-central1-docker.pkg.dev/$PROJECT_ID/rate-grid-d/rate-grid-d:latest
        docker push us-central1-docker.pkg.dev/$PROJECT_ID/rate-grid-d/rate-grid-d:latest

  # 5. Deploy to Cloud Run with IAM policy
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Deploy to Cloud Run
    entrypoint: bash
    args:
      - '-c'
      - |
        # Deploy the service
        gcloud run deploy ${_SERVICE_NAME} \
          --image=us-central1-docker.pkg.dev/$PROJECT_ID/rate-grid-d/rate-grid-d:$SHORT_SHA \
          --region=${_REGION} \
          --platform=managed \
          --port=8080 \
          --service-account=530137774523-compute@developer.gserviceaccount.com \
          --set-env-vars=NODE_ENV=development,APP_ENV=development,GCP_PROJECT_ID=rate-grid-d,DATABASE_URL=sm://DATABASE_URL,OPENAI_API_KEY=sm://OPENAI_API_KEY,SESSION_SECRET=sm://SESSION_SECRET,DOCUMENT_AI_PROCESSOR_ID=sm://DOCUMENT_AI_PROCESSOR_ID,GCP_SERVICE_ACCOUNT_KEY=sm://GCP_SERVICE_ACCOUNT_KEY,SSL_ENABLED=true \
          --ingress=all \
          --no-traffic \
          --concurrency=80 \
          --timeout=600 \
          --cpu=1000m \
          --memory=512Mi \
          --max-instances=40 \
          --min-instances=0 \
          --cpu-throttling \
          --execution-environment=gen2 \
          --session-affinity \
          --use-http2 \
          --cpu-boost \
          --quiet || true

        # Wait for deployment to complete
        echo "Waiting for deployment to complete..."
        sleep 60

        # Get the latest revision
        echo "Getting latest revision..."
        latest_rev=$(gcloud run revisions list --service=${_SERVICE_NAME} --region=${_REGION} --sort-by="~creationTimestamp" --limit=1 --format="value(metadata.name)")
        
        if [ -n "$latest_rev" ]; then
          echo "Waiting for revision to be ready..."
          # Wait for revision to be ready
          for i in {1..30}; do
            status=$(gcloud run revisions describe $latest_rev --region=${_REGION} --format="value(status.conditions[0].status)")
            if [ "$status" = "True" ]; then
              echo "Revision is ready"
              break
            fi
            echo "Revision not ready yet, waiting..."
            sleep 10
          done

          # FINAL SAFE CHECK - ADDED
          revision_status=$(gcloud run revisions describe $latest_rev --region=${_REGION} --format="value(status.conditions[?(@.type=='Ready')].status)")
          if [ "$revision_status" != "True" ]; then
            echo "ERROR: Latest revision $latest_rev is not ready. Aborting traffic update."
            exit 1
          fi

          echo "Updating traffic to revision: $latest_rev"
          gcloud run services update-traffic ${_SERVICE_NAME} --region=${_REGION} --to-revisions=$latest_rev=100
        else
          echo "No revisions found for service ${_SERVICE_NAME}"
          exit 1
        fi

  # 6. Keep only last 5 Cloud Run revisions
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Prune Old Revisions
    entrypoint: bash
    args:
      - '-c'
      - |
        revs=$(gcloud run revisions list --service=${_SERVICE_NAME} --region=${_REGION} --sort-by="~creationTimestamp" --format="value(metadata.name)")
        to_delete=$(echo "$revs" | tail -n +6)
        for rev in $to_delete; do
          gcloud run revisions delete $rev --region=${_REGION} --quiet
        done

  # 7. Keep only last 2 Artifact Registry images
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Prune Old Images
    entrypoint: bash
    args:
      - '-c'
      - |
        images=$(gcloud artifacts docker images list us-central1-docker.pkg.dev/$PROJECT_ID/rate-grid-d --format="value(package)" | sort -r)
        to_delete=$(echo "$images" | tail -n +3)
        for img in $to_delete; do
          gcloud artifacts docker images delete "$img" --quiet --delete-tags
        done

  # 8. Send build notification
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Send Notification
    entrypoint: bash
    args:
      - '-c'
      - |
        gcloud pubsub topics publish ci-notify \
          --message="Development deployment completed for commit $COMMIT_SHA" \
          --attribute="status=success,environment=development,commit=$COMMIT_SHA"

images:
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/rate-grid-d/rate-grid-d:$SHORT_SHA'
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/rate-grid-d/rate-grid-d:latest'

substitutions:
  _SERVICE_NAME: 'rate-grid-d'
  _REGION: 'us-central1'

timeout: '1800s'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
  substitution_option: 'ALLOW_LOOSE'

# IAM Requirements:
# - Cloud Build Service Account needs:
#   - roles/run.admin on rate-grid-d project
#   - roles/storage.admin on rate-grid-d project
#   - roles/pubsub.publisher on ci-notify topic
#   - roles/iam.serviceAccountUser on rate-grid-d project
#   - roles/resourcemanager.projectIamAdmin on rate-grid-d project
#   - roles/secretmanager.secretAccessor on rate-grid-d project
#
# - Service Account (rate-grid-d-sa) needs:
#   - roles/secretmanager.secretAccessor on rate-grid-d project
#
# After deployment, run this command manually to allow public access:
# gcloud run services add-iam-policy-binding rate-grid-d \
#   --region=us-central1 \
#   --member=allUsers \
#   --role=roles/run.invoker