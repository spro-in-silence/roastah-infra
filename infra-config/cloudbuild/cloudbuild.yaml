# Cloud Build configuration for production deployment
steps:
  # 1. Authenticate to Artifact Registry
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Authenticate
    entrypoint: bash
    args:
      - '-c'
      - |
        gcloud auth configure-docker us-central1-docker.pkg.dev

  # 2. Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    id: Build Image
    entrypoint: bash
    args:
      - '-c'
      - |
        docker build -t us-central1-docker.pkg.dev/$PROJECT_ID/roastah/roastah:$SHORT_SHA .
        docker push us-central1-docker.pkg.dev/$PROJECT_ID/roastah/roastah:$SHORT_SHA

  # 3. Tag as latest
  - name: 'gcr.io/cloud-builders/docker'
    id: Tag Latest
    entrypoint: bash
    args:
      - '-c'
      - |
        docker tag us-central1-docker.pkg.dev/$PROJECT_ID/roastah/roastah:$SHORT_SHA us-central1-docker.pkg.dev/$PROJECT_ID/roastah/roastah:latest
        docker push us-central1-docker.pkg.dev/$PROJECT_ID/roastah/roastah:latest

  # 4. Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Deploy to Cloud Run
    entrypoint: bash
    args:
      - '-c'
      - |
        # Deploy the service
        gcloud run deploy ${_SERVICE_NAME} \
          --image=us-central1-docker.pkg.dev/$PROJECT_ID/roastah/roastah:$SHORT_SHA \
          --region=${_REGION} \
          --platform=managed \
          --allow-unauthenticated \
          --port=8080 \
          --set-env-vars=NODE_ENV=production,APP_ENV=production,GCP_PROJECT_ID=roastah,DATABASE_URL=sm://DATABASE_URL,OPENAI_API_KEY=sm://OPENAI_API_KEY,SESSION_SECRET=sm://SESSION_SECRET,GCP_SERVICE_ACCOUNT_KEY=sm://GCP_SERVICE_ACCOUNT_KEY,SSL_ENABLED=true \
          --ingress=all \
          --no-traffic \
          --concurrency=80 \
          --timeout=600 \
          --cpu=1000m \
          --memory=512Mi \
          --max-instances=100 \
          --min-instances=0 \
          --cpu-throttling \
          --execution-environment=gen2 \
          --session-affinity \
          --use-http2 \
          --cpu-boost \
          --quiet || true

        # Wait for deployment to complete
        echo "Waiting for deployment to complete..."
        sleep 60

        # Get the latest revision
        echo "Getting latest revision..."
        latest_rev=$(gcloud run revisions list --service=${_SERVICE_NAME} --region=${_REGION} --sort-by="~creationTimestamp" --limit=1 --format="value(metadata.name)")
        
        if [ -n "$latest_rev" ]; then
          echo "Waiting for revision to be ready..."
          # Wait for revision to be ready
          for i in {1..30}; do
            status=$(gcloud run revisions describe $latest_rev --region=${_REGION} --format="value(status.conditions[0].status)")
            if [ "$status" = "True" ]; then
              echo "Revision is ready"
              break
            fi
            echo "Revision not ready yet, waiting..."
            sleep 10
          done

          # FINAL SAFE CHECK - ADDED
          revision_status=$(gcloud run revisions describe $latest_rev --region=${_REGION} --format="value(status.conditions[?(@.type=='Ready')].status)")
          if [ "$revision_status" != "True" ]; then
            echo "ERROR: Latest revision $latest_rev is not ready. Aborting traffic update."
            exit 1
          fi

          echo "Updating traffic to revision: $latest_rev"
          gcloud run services update-traffic ${_SERVICE_NAME} --region=${_REGION} --to-revisions=$latest_rev=100
        else
          echo "No revisions found for service ${_SERVICE_NAME}"
          exit 1
        fi

  # 5. Keep only last 5 Cloud Run revisions
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Prune Old Revisions
    entrypoint: bash
    args:
      - '-c'
      - |
        revs=$(gcloud run revisions list --service=${_SERVICE_NAME} --region=${_REGION} --sort-by="~creationTimestamp" --format="value(metadata.name)")
        to_delete=$(echo "$revs" | tail -n +6)
        for rev in $to_delete; do
          gcloud run revisions delete $rev --region=${_REGION} --quiet
        done

  # 6. Keep only last 2 Artifact Registry images
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Prune Old Images
    entrypoint: bash
    args:
      - '-c'
      - |
        images=$(gcloud artifacts docker images list us-central1-docker.pkg.dev/$PROJECT_ID/roastah --format="value(package)" | sort -r)
        to_delete=$(echo "$images" | tail -n +3)
        for img in $to_delete; do
          gcloud artifacts docker images delete "$img" --quiet --delete-tags
        done

  # 7. Send build notification
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: Send Notification
    entrypoint: bash
    args:
      - '-c'
      - |
        gcloud pubsub topics publish ci-notify \
          --message="Production deployment completed for commit $COMMIT_SHA" \
          --attribute="status=success,environment=production,commit=$COMMIT_SHA"

images:
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/roastah/roastah:$SHORT_SHA'
  - 'us-central1-docker.pkg.dev/$PROJECT_ID/roastah/roastah:latest'

substitutions:
  _SERVICE_NAME: 'roastah'
  _REGION: 'us-central1'

timeout: '1800s'

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'

# IAM Requirements (managed by Terraform):
# - Cloud Build Service Account needs:
#   - roles/run.admin on roastah project
#   - roles/storage.admin on roastah project
#   - roles/pubsub.publisher on ci-notify topic
#   - roles/iam.serviceAccountUser on roastah project
#   - roles/secretmanager.secretAccessor on roastah project
#
# All IAM permissions are now managed by Terraform
